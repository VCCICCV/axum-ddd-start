[package]
name = "axum-ddd-start"
version = "0.1.0"
edition = "2021"

# 工作区依赖仅指定版本，serde = { workspace = true }才是真正导入
[workspace.dependencies]
domain = { path = "domain" }
application = { path = "application" }
infrastructure = { path = "infrastructure" }
interface = { path = "interface" }
migration = { path = "migration" }
common = { path = "common" }

axum = "0.7.6"
axum-extra = "0.9.4"
sea-orm = { version = "1.0.1", features = [
    "runtime-tokio-native-tls",
    "sqlx-postgres",
    "macros",
] }
tokio = { version = "1", features = ["full"] }
# # 处理HTTP请求例如解析请求体
# hyper = { version = "1.4.1", features = ["full"] }
# 处理HTTP请求例如跨域处理
tower-http = { version = "0.6.1", features = ["cors"] }
# 序列化和反序列化数据
serde = { version = "1.0.127", features = ["derive"] }
# 序列化JSON
serde_json = "1.0.128"
# 错误处理
anyhow = "1.0.86"
# 自定义错误
thiserror = "1.0.64"
# 读取env
dotenvy = "0.15.7"
# 分布式跟踪的 SDK，用于采集监控数据，这里用其日志功能
tracing = "0.1.40"
# 将 Rust 的错误类型与 Tracing 的 span 相关联的库
tracing-error = "0.2.0"
# 日志过滤器
tracing-subscriber = { version = "0.3", default-features = true, features = [
    "std",
    "env-filter",
    "registry",
    "local-time",
    "fmt",
] }
# 日志记录器
tracing-appender = "0.2.3"
# redis 客户端
redis = {version = "0.27.2",features = ["aio","tokio-comp"]}
# 使用tokio实现的连接池，支持postgres、redis、redis cluster、rsmq等
bb8 = "0.8.5"
bb8-redis = "0.17.0"
#Media Type
mime = "0.3.17"
[workspace]
members = [
    ".",
    "interface",
    "application",
    "domain",
    "infrastructure",
    "migration",
    "common",
]
# 启动和测试需要添加
[dependencies]
interface = { workspace = true }
infrastructure = { workspace = true }
tokio = { workspace = true }